#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: x86_64test

on:
  repository_dispatch:
    types: [lean, x86_64]
  workflow_dispatch:
  schedule:
    - cron: 0 18 * * *
#  watch:
#    types: started

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: config/lean/x86/x86_64-lean-target.config
  DIY_SH: scripts/lean-openwrt.sh
  FEEDS_CONF: feeds.conf.default
  IPV6MOD_IN_FIRMWARE: true
  KMODS_IN_FIRMWARE: true
  UPLOAD_DL: true
  UPLOAD_RCLONE: true
  UPLOAD_WETRANSFER: true
  UPLOAD_COWTRANSFER: true
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-18.04

    outputs:
      OPENWRTROOT: ${{ steps.update.outputs.OPENWRTROOT }}
      PLATFORM: ${{ steps.compile.outputs.PLATFORM }}
      TARGET: ${{ steps.compile.outputs.TARGET }}
      SUBTARGET: ${{ steps.compile.outputs.SUBTARGET }}
      FIRMWARE: ${{ steps.compile.outputs.FIRMWARE }}
      GENERATE_STATUS: ${{ steps.generate.outputs.GENERATE_STATUS }}

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804) tree
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
    - name: Clone Source Code
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        
    - name: Move Feeds                   # 4.下载Feeds
      run: |
        mv $FEEDS_CONF openwrt/feeds.conf.default
           
    - name: Update Feeds
      id: update
      run: |
        cd openwrt
        echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV
        echo "::set-output name=OPENWRTROOT::$(echo $PWD)"
        sed -i 's/coolsnowwolf\/luci/Lienol\/openwrt-luci.git;18.06/g' feeds.conf.default
        ./scripts/feeds update -a
        
    - name: Install Feeds
      run: |
        cd $OPENWRTROOT
        ./scripts/feeds install -a                 
      
    - name: Load Custom Configuration
      run: |
        [ -e files ] && mv files $OPENWRTROOT/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRTROOT/.config
        cat config/lean/x86/x86-lean-extra.config >> $OPENWRTROOT/.config
        chmod +x scripts/*.sh
        ../$DIY_SH
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Download Package
      id: package
      run: |
        cd $OPENWRTROOT
        if "$KMODS_IN_FIRMWARE" = 'true'
        then
            echo "CONFIG_ALL_KMODS=y" >> .config
        fi
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    - name: Compile Packages
      id: compile
      run: |
        cd $OPENWRTROOT
        echo -e "$(nproc) thread compile"
        make tools/compile -j$(nproc) || make tools/compile -j1 V=s
        make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s
        make target/compile -j$(nproc) || make target/compile -j1 V=s IGNORE_ERRORS=1
        make diffconfig
        make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
        make package/index
        cd $OPENWRTROOT/bin/packages/*
        PLATFORM=$(basename `pwd`)
        echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
        echo "::set-output name=PLATFORM::$(echo $PLATFORM)"
        cd $OPENWRTROOT/bin/targets/*
        TARGET=$(basename `pwd`)
        echo "TARGET=$TARGET" >> $GITHUB_ENV
        echo "::set-output name=TARGET::$(echo $TARGET)"
        cd *
        SUBTARGET=$(basename `pwd`)
        echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV
        echo "::set-output name=SUBTARGET::$(echo $SUBTARGET)"
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=FIRMWARE::$(echo $PWD)"
        echo "::set-output name=COMPILE_STATUS::success"
        
    - name: Compress Img Files
      run: |
        cd $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET
        gzip *.img
    - name: Upload Bin Folder
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.GENERATE_STATUS == 'success'
      with:
        name: bin-archive
        path: openwrt/bin
        
    - name: Upload DL Folder
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.GENERATE_STATUS == 'success'
      with:
        name: dl-archive
        path: openwrt/dl

  Upload:
    needs: [Build]
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout
        uses: actions/checkout@main
        
      - name: Restore Variables
        run: |
          echo "OPENWRTROOT=$(echo '${{needs.Build.outputs.OPENWRTROOT}}')" >> $GITHUB_ENV
          echo "PLATFORM=$(echo '${{needs.Build.outputs.PLATFORM}}')" >> $GITHUB_ENV
          echo "TARGET=$(echo '${{needs.Build.outputs.TARGET}}')" >> $GITHUB_ENV
          echo "SUBTARGET=$(echo '${{needs.Build.outputs.SUBTARGET}}')" >> $GITHUB_ENV
          echo "FIRMWARE=$(echo '${{needs.Build.outputs.FIRMWARE}}')" >> $GITHUB_ENV
          echo "GENERATE_STATUS=$(echo '${{needs.Build.outputs.GENERATE_STATUS}}')" >> $GITHUB_ENV
          
      - name: Download Bin Folder
        uses: actions/download-artifact@v2
        if: env.GENERATE_STATUS == 'success'
        with:
          name: bin-archive
          path: openwrt/bin
          
      - name: Download DL Folder Archive
        uses: actions/download-artifact@v2
        if: env.GENERATE_STATUS == 'success'
        with:
          name: dl-archive
          path: openwrt/dl

      - name: Compress DL Folder Archive
        run: |
          cd $OPENWRTROOT
          zip -qrm dl-archive.zip dl
      - name: Deploy Packages-Server
        if: env.GENERATE_STATUS == 'success'
        run: |
          mkdir -p server/web/snapshots/targets/$TARGET/$SUBTARGET
          cp -r $OPENWRTROOT/bin/packages server/web/snapshots
          cp -r $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET/packages server/web/snapshots/targets/$TARGET/$SUBTARGET
          mv server packages-server
          zip -qrm packages-server.zip packages-server
          mv packages-server.zip $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET
      - name: Configure Rclone
        env:
          RCLONE_CONFIG: ${{ secrets.RCLONE_CONFIG }}
        if: env.GENERATE_STATUS == 'success' && env.UPLOAD_RCLONE == 'true'
        run: |
          cd $OPENWRTROOT
          curl https://rclone.org/install.sh | sudo bash
          mkdir -p ~/.config/rclone/
          cat << EOF > ~/.config/rclone/rclone.conf
          $RCLONE_CONFIG
          EOF
      - name: Upload Targets File To Rclone
        if: env.GENERATE_STATUS == 'success' && env.UPLOAD_RCLONE == 'true'
        run: |
          cd $OPENWRTROOT
          rclone copy bin ${{ secrets.RCLONE_REMOTE }}:$(date +"%Y-%m-%d")/lean
          rclone copy dl-archive.zip ${{ secrets.RCLONE_REMOTE }}:$(date +"%Y-%m-%d")/lean/targets/$TARGET/$SUBTARGET
          echo "::warning file=Firmware-GoogleDrive::Download Link: https://drive.google.com/drive/folders/1SkNpJkhmG8veheL3ADVFoVTkvfhWjW0P"
      - name: Organize Files
        id: organize
        if: env.GENERATE_STATUS == 'success' && !cancelled()
        run: |
          cd ${FIRMWARE}
          rm -rf packages
          cd $OPENWRTROOT/bin/targets/$TARGET/
          mkdir -p uefi-images
          mkdir -p legacy-images
          mkdir -p other-files
          mv $SUBTARGET/*combined-efi* uefi-images
          mv $SUBTARGET/*combined* legacy-images
          mv $SUBTARGET/* other-files
          curl -fsSL git.io/file-transfer | sh
          df -hT $PWD
          echo "::set-output name=ORGANIZE_STATUS::success"
          
      - name: Upload Uefi Firmwares To Cowtransfer
        if: steps.organize.outputs.ORGANIZE_STATUS == 'success' && env.UPLOAD_COWTRANSFER == 'true'
        run: |
          cd $OPENWRTROOT/bin/targets/$TARGET
          ./transfer cow --block 2621440 -s -p 64 --no-progress ./uefi-images 2>&1 | tee cowtransfer-uefi.log
          echo "::warning file=Cowtransfer-UEFI=::$(cat cowtransfer-uefi.log | grep https)"
          
      - name: Upload Legacy Firmwares To Cowtransfer
        if: steps.organize.outputs.ORGANIZE_STATUS == 'success' && env.UPLOAD_COWTRANSFER == 'true'
        run: |
          cd $OPENWRTROOT/bin/targets/$TARGET/
          ./transfer cow --block 2621440 -s -p 64 --no-progress ./legacy-images 2>&1 | tee cowtransfer-legacy.log
          echo "::warning file=Cowtransfer-Legacy=::$(cat cowtransfer-legacy.log | grep https)"
          
      - name: Upload Other Files To Cowtransfer
        if: steps.organize.outputs.ORGANIZE_STATUS == 'success' && env.UPLOAD_COWTRANSFER == 'true'
        run: |
          cd $OPENWRTROOT/bin/targets/$TARGET/
          ./transfer cow --block 2621440 -s -p 64 --no-progress ./other-files 2>&1 | tee cowtransfer-other.log
          echo "::warning file=Cowtransfer-OtherFiles=::$(cat cowtransfer-other.log | grep https)"
          
      - name: Upload Uefi Firmwares To WeTransfer
        if: steps.organize.outputs.ORGANIZE_STATUS == 'success' && env.UPLOAD_WETRANSFER == 'true'
        run: |
          cd $OPENWRTROOT/bin/targets/$TARGET
          ./transfer wet -s -p 16 --no-progress ./uefi-images 2>&1 | tee wetransfer-uefi.log
          echo "::warning file=Wetransfer-UEFI=::$(cat wetransfer-uefi.log | grep https)"
          
      - name: Upload Legacy Firmwares To WeTransfer
        if: steps.organize.outputs.ORGANIZE_STATUS == 'success' && env.UPLOAD_WETRANSFER == 'true'
        run: |
          cd $OPENWRTROOT/bin/targets/$TARGET/
          ./transfer wet -s -p 16 --no-progress ./legacy-images 2>&1 | tee wetransfer-legacy.log
          echo "::warning file=Wetransfer-Legacy::$(cat wetransfer-legacy.log | grep https)"
          
      - name: Upload Other Files To WeTransfer
        if: steps.organize.outputs.ORGANIZE_STATUS == 'success' && env.UPLOAD_WETRANSFER == 'true'
        run: |
          cd $OPENWRTROOT/bin/targets/$TARGET/
          ./transfer wet -s -p 16 --no-progress ./other-files 2>&1 | tee wetransfer-other.log
          echo "::warning file=Wetransfer-OtherFiles::$(cat wetransfer-other.log | grep https)"
          
      - name: Upload DL To CowTransfer
        if: steps.organize.outputs.ORGANIZE_STATUS == 'success' && env.UPLOAD_DL == 'true'
        run: |
          cd $OPENWRTROOT/bin/targets/$TARGET/
          ./transfer cow --block 2621440 -s -p 64 --no-progress ${OPENWRTROOT}/DL.zip 2>&1 | tee cowtransfer-dl.log
          
      - name: Upload DL To WeTransfer
        if: steps.organize.outputs.ORGANIZE_STATUS == 'success' && env.UPLOAD_DL == 'true'
        run: |
          cd $OPENWRTROOT/bin/targets/$TARGET/
          ./transfer wet -s -p 16 --no-progress ${OPENWRTROOT}/DL.zip 2>&1 | tee wetransfer-dl.log
      - name: Delete Artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            bin-archive
            dl-archive
